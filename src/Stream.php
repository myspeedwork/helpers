<?php

/**
 * This file is part of the Speedwork package.
 *
 * (c) 2s Technologies <info@2stechno.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Speedwork\Helpers;

/**
 * @author sankar <sankar.suda@gmail.com>
 */
class Stream
{
    private $mime_types = [
        '.txt'  => 'text/plain',
        '.json' => 'application/json',
        '.xml'  => 'application/xml',
        '.doc'  => 'application/msword',
        '.rtf'  => 'application/rtf',
        '.xls'  => 'application/vnd.ms-excel',
        '.csv'  => 'application/vnd.ms-excel',
        '.ppt'  => 'application/vnd.ms-powerpoint',
        '.pdf'  => 'application/pdf',
    ];

    private $seperator = "\t";

    protected $lineEnd = "\r\n";

    public function start($filename)
    {
        if (ini_get('zlib.output_compression')) {
            ini_set('zlib.output_compression', 'Off');
        }

        $ext  = strtolower(strrchr($filename, '.'));
        $type = $this->mime_types[$ext];

        if ($ext == '.csv') {
            $this->seperator = ',';
        }

        set_time_limit(0);
        //header("Content-Type: application/force-download");
        header('Content-Type: application/octet-stream');
        //header("Content-Type: application/download");
        header('Content-Description: File Transfer');
        header('Content-Type: '.$type);
        header('Content-Disposition: attachment;filename="'.$filename.'"');
        //header("Cache-control: private");

        $seconds = 30;
        header('Expires: '.gmdate('D, d M Y H:i:s', time() + $seconds).' GMT');
        header('Cache-Control: max-age='.$seconds.', s-maxage='.$seconds.', must-revalidate, proxy-revalidate');

        session_cache_limiter(false); // Disable session_start() caching headers
        if (session_id()) {
            // Remove Pragma: no-cache generated by session_start()
            if (function_exists('header_remove')) {
                header_remove('Pragma');
            } else {
                header('Pragma:');
            }
        }
    }

    public function header(&$fields = [], $seperator = '')
    {
        if (is_array($fields)) {
            $out = [];
            foreach ($fields as $field) {
                $field = strtoupper($field);
                if (strpos($field, ' AS ') !== false) {
                    $field = explode(' AS ', $field);
                    $field = trim($field[1]);
                }
                $out[] = ucwords(str_replace('_', ' ', $field));
            }

            $seperator = ($seperator) ?: $this->seperator;
            echo @implode($seperator, $out).$this->lineEnd;
        }
    }

    public function excel(&$fields = [], &$data = [], $seperator = '')
    {
        $seperator = ($seperator) ?: $this->seperator;
        $this->header($fields, $seperator);
        $this->flushRows($data, $seperator);
    }

    public function output(&$data = [], $fields = [], $keys = false, $seperator = '')
    {
        $seperator = ($seperator) ?: $this->seperator;

        if ($keys || empty($fields)) {
            $fields = array_keys($data[0]);
        }

        if (array_values($fields) === $fields) {
            foreach ($fields as $k => $field) {
                $fields[$field] = $field;
                unset($fields[$k]);
            }
        }

        echo @implode($seperator, $fields).$this->lineEnd;

        foreach ($data as $row) {
            $out = [];
            foreach ($fields as $k => $v) {
                $out[] = $this->clean($row[$k]);
            }

            echo @implode($seperator, $out).$this->lineEnd;
            flush();
            ob_flush();
        }
        unset($data, $fields, $out);
    }

    public function flush(&$row = [], &$fields = [], $seperator = '')
    {
        $seperator = ($seperator) ?: $this->seperator;

        $out = [];
        foreach ($fields as $k => $v) {
            $out[] = $this->clean($row[$k]);
        }

        echo @implode($seperator, $out).$this->lineEnd;
        flush();
        ob_flush();

        unset($out);
    }

    public function flushRows(&$rows = [], $seperator = '')
    {
        $seperator = ($seperator) ?: $this->seperator;
        foreach ($rows as $row) {
            echo @implode($seperator, $row).$this->lineEnd;
            flush();
            ob_flush();
        }
    }

    public function clean(&$string)
    {
        return str_replace(["\n","\t","\r"], '', $string);
    }

    /**
     * Function to read local and remote file.
     *
     * @param [type] $filename [description]
     *
     * @return [type] [description]
     */
    public function readFile($filename)
    {
        $chunksize = 2 * (1024 * 1024); // how many bytes per chunk
        $buffer    = '';

        $handle = fopen($filename, 'rb');

        if ($handle === false) {
            return false;
        }

        while (!feof($handle)) {
            $buffer = fread($handle, $chunksize);
            echo $buffer;
            ob_flush();
            flush();
        }

        $status = fclose($handle);

        return $status;
    }
}
